import { Tooltip, Typography, Tag, Button } from "antd";
import Image from "next/image";
import { formatType } from "@/utils/common-utils";
import { InfoCircleOutlined } from "@ant-design/icons";

export const defaultVulnerabilityColumns = [
    // {
    //     title: 'Application',
    //     dataIndex: "service_name",
    //     key: "service_name",
    //     width: '150px'
    // },
    {
        title: 'Location',
        dataIndex: "file",
        key: "file",
        render: (value: string[], record: any) => (
            <div
                className="flex items-center cursor-pointer"
            // onClick={() => handleRowClick(record)}
            >
                {/* <Tooltip> */}
                <span
                    className="truncate text-ellipsis"
                    style={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}
                    title={"hello"} // Tooltip to show full text on hover
                >
                    <Tooltip title={value} placement="bottomLeft">
                        {value}
                    </Tooltip>
                </span>
                {/* <div className="ml-2">
                        <Image src="/Link.svg" alt="link" width={14} height={14} />
                    </div> */}
                {/* </Tooltip> */}

            </div>

        ),
    },
    {
        title: 'Vulnerability Type',
        dataIndex: "cwe_title",
        key: "cwe_title",
        render: (value: string) => {
            return <Typography className="self-center">{value || '-'}</Typography>
        }
    },
    {
        title: (<div className="flex gap-1">
            <Typography>Attribute</Typography>
            <Tooltip title='Attribute can be integer or text relevant to vulnerability'><InfoCircleOutlined /></Tooltip>
        </div>),
        dataIndex: "line",
        key: "line"
    },
    {
        title: 'Type',
        dataIndex: "tool",
        key: "tool",
        // width: '150px',
        render: (value: string, record: any) => {
            // console.log("record",record['_id']);
            

            return <Tooltip title={formatType(record?.integration_id)} placement="right">
                <Tag className="rounded-md bg-white border border-gray-300 text-sm">
                    <div className="flex gap-1">
                        <Image src={`/${value}.svg`} alt="chipIcon" width={10} height={10} />
                        <Typography>{value.toUpperCase()}</Typography>
                    </div>
                </Tag>
            </Tooltip>
        },
    },
    {
        title: 'Severity',
        dataIndex: "impact",
        key: "impact",
        // width: '150px',
        render: (value: string) => {
            const colorMap: Record<string, string> = {
                low: "#40BE60",
                medium: "#FFA200",
                high: "#FF4248",
                critical: "#C80008",
                unknown: "#88879E",
            };
            return (
                <Typography
                    className="text-sm"
                    style={{ color: colorMap[value.toLowerCase()] || "#000000" }}
                >
                    {value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()}
                </Typography>
            );
        },
    },
    {
        title: 'Status',
        dataIndex: "status",
        key: "status",
        // width: '150px',

    },
];
